package r.base.random;

import r.EvalTestCase;

import org.junit.Before;
import org.junit.Test;
import static org.hamcrest.Matchers.closeTo;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;

public class TestRNG extends EvalTestCase {

  private static final double DELTA = 0.1;

  @Before
  public void setUpTests() {
    assumingBasePackagesLoad();
  }
  
  /*
   * Test for consistency of renjin generated pseudo random numbers.
   * Desired output is not generated by the original interpreter.
   */
  @Test
  public void runif() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");

    /*
    assertThat(eval("mean(runif(100000,0,2))").asReal(), closeTo(1.00, 0.01));
    eval("a<-runif(5,0,2)");
    assertThat(eval("a[1]").asReal(), closeTo(1.85923218399747, DELTA));
    assertThat(eval("a[2]").asReal(), closeTo(0.63275111111126, DELTA));
    assertThat(eval("a[3]").asReal(), closeTo(0.36783760904549, DELTA));
    assertThat(eval("a[4]").asReal(), closeTo(0.40912055451978, DELTA));
    assertThat(eval("a[5]").asReal(), closeTo(1.13545005119079, DELTA));
     */

  }

  @Test
  public void rbinom() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rbinom(1000,100,0.5))").asReal(), closeTo(50.0, DELTA));
    assertThat(eval("mean(rbinom(1000,200,0.9))").asReal(), closeTo(179.99, DELTA));
    assertThat(eval("mean(rbinom(1000,250,0.12))").asReal(), closeTo(29.9, DELTA));
  }
  
  
  @Test
  public void rsignrank() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rsignrank(1000,100))").asReal(), closeTo(2525.781, DELTA));
  }
  
  @Test
  public void rwilcox() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rwilcox(10000,4,5))").asReal(), closeTo(10, DELTA));
  }
  
   @Test
  public void rhyper() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rhyper(10000,17,16,13))").asReal(), closeTo(6.5, DELTA));
  }

}
